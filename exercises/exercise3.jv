// SPDX-FileCopyrightText: 2023 Friedrich-Alexander-Universitat Erlangen-Nurnberg
//
// SPDX-License-Identifier: AGPL-3.0-only

// Example 1: LightTrapping
// Learning goals:
// - Understand how to work with XLSX files and workbooks

// 1. This Jayvee model describes a pipeline 
// from a XLSX file with multiple Sheets in the web 
// to a SQLite file sink.
pipeline GraphExtractorCellPipeline {

  
  GraphExtractorCellExtractor
    -> LightTrappingSiliconSolarCellsTextXLSXInterpreter
	-> LightTrappingSiliconSolarCellsSheetpicker
    -> CarsCoreDataSelector
	-> NameHeaderWriter
	-> GdpPerCapitaTableInterpreter
    -> GdpPerCapitaCellsLoader;
	
  NameHeaderWriter
  	-> LightTrappingSiliconSolarCellsTableInterpreter
    -> LightTrappingSiliconSolarCellsLoader;
  
  // 5. Once the XLSX file is interpreted, we can split the pipeline and 
  // work separately on the different sheets from our input file
  
  block GraphExtractorCellExtractor oftype HttpExtractor {
    url: "https://thedocs.worldbank.org/en/doc/7d852628d96b9411d43e5d36d5dff941-0050062022/original/Graphs-Chapter-5-02082022.xlsx";
  }

  // 3. The incoming file is interpreted as a XLSX file and transformed into a Workbook
  // Workbooks contain at least 1 Sheet. Every sheet has a unique name. 
  block LightTrappingSiliconSolarCellsTextXLSXInterpreter oftype XLSXInterpreter { }

  // 4.1 Here, we pick one sheet with the name 'RefractiveIndexSi GaAs' from the Workbook to use within our pipeline. 
  // The output type from SheetPicker is Sheet, which was already introduced in the cars example
  block LightTrappingSiliconSolarCellsSheetpicker oftype SheetPicker {
    sheetName: 'Figure S5.1.2';
  }
  
   block CarsCoreDataSelector oftype CellRangeSelector {
   select: range P2:S45;
	}

  block NameHeaderWriter oftype CellWriter {
    at: range A1:D1;
    write: [
      "Country Code",
      "Economy",
      "GDP per Capita",
      "Bond Issuance Share"
    ];
  }

  block LightTrappingSiliconSolarCellsTableInterpreter oftype TableInterpreter {
    header: true;
    columns: [
      "Country Code" oftype CountryCodeAlpha3,
      "Bond Issuance Share" oftype decimal
    ];
  }

  block LightTrappingSiliconSolarCellsLoader oftype SQLiteLoader {
    table: "bondIssuance";
    file: "./country-stats.sqlite";
  }
  
    block GdpPerCapitaTableInterpreter oftype TableInterpreter {
    header: true;
    columns: [
      "Country Code" oftype CountryCodeAlpha3,
      "GDP per Capita" oftype decimal,

    ];
  }

  block GdpPerCapitaCellsLoader oftype SQLiteLoader {
    table: "gdpPerCapita";
    file: "./country-stats.sqlite";
  }

}